{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/data-store.ts"],"sourcesContent":["// Shared data store for mock data with development persistence\nimport { Booking, User, Membership, Coach, League, GiftCard, DiscountCode } from \"./types\"\n\n// Global storage to persist across hot reloads in development\ndeclare global {\n  var __dataStore: DataStore | undefined\n}\n\n// In-memory data store (in a real app, this would be a database)\nexport class DataStore {\n  private bookings: Booking[] = []\n  private users: User[] = []\n  private memberships: Membership[] = []\n  private coaches: Coach[] = []\n  private leagues: League[] = []\n  private giftCards: GiftCard[] = []\n  private discountCodes: DiscountCode[] = []\n\n  constructor() {\n    // Initialize with some sample data only if empty\n    if (this.bookings.length === 0) {\n      this.initializeSampleData()\n    }\n  }\n\n  private initializeSampleData() {\n    // Sample admin user\n    this.users = [\n      {\n        id: \"admin_1\",\n        name: \"Admin User\",\n        email: \"admin@golfsim.com\",\n        phone: \"555-0100\",\n        password: \"admin123\",\n        isAdmin: true,\n        createdAt: new Date(\"2024-01-01\")\n      },\n      {\n        id: \"user_1\",\n        name: \"John Smith\",\n        email: \"john@example.com\",\n        phone: \"555-0101\",\n        membershipId: \"membership_1\",\n        createdAt: new Date(\"2024-01-15\")\n      },\n      {\n        id: \"user_2\",\n        name: \"Sarah Johnson\",\n        email: \"sarah@example.com\",\n        phone: \"555-0102\",\n        createdAt: new Date(\"2024-02-01\")\n      },\n      {\n        id: \"user_3\",\n        name: \"Pete Weldon\",\n        email: \"pete.weldon@gmail.com\",\n        phone: \"555-0103\",\n        password: \"99csutma!\",\n        createdAt: new Date(\"2024-01-20\")\n      }\n    ]\n\n    // Sample memberships\n    this.memberships = [\n      {\n        id: \"membership_1\",\n        userId: \"user_1\",\n        status: \"active\",\n        freeHoursRemaining: 1.5,\n        billingDate: new Date(\"2024-02-15\"),\n        createdAt: new Date(\"2024-01-15\")\n      }\n    ]\n\n    // Sample bookings\n    this.bookings = [\n      {\n        id: \"booking_1\",\n        userId: \"user_1\",\n        date: new Date(\"2024-01-15\"),\n        startTime: \"14:00\",\n        endTime: \"16:00\",\n        duration: 2,\n        numberOfBays: 1,\n        numberOfPeople: 2,\n        bayNumbers: [1],\n        totalPrice: 100,\n        type: \"regular\",\n        status: \"confirmed\",\n        createdAt: new Date(\"2024-01-10\")\n      },\n      {\n        id: \"booking_2\",\n        guestName: \"Mike Wilson\",\n        guestEmail: \"mike@example.com\",\n        guestPhone: \"555-0103\",\n        date: new Date(\"2024-01-20\"),\n        startTime: \"10:00\",\n        endTime: \"11:30\",\n        duration: 1.5,\n        numberOfBays: 1,\n        numberOfPeople: 3,\n        bayNumbers: [2],\n        totalPrice: 75,\n        type: \"regular\",\n        status: \"completed\",\n        createdAt: new Date(\"2024-01-18\")\n      },\n      {\n        id: \"booking_3\",\n        userId: \"user_2\",\n        date: new Date(\"2024-02-05\"),\n        startTime: \"16:00\",\n        endTime: \"17:00\",\n        duration: 1,\n        numberOfBays: 1,\n        numberOfPeople: 1,\n        bayNumbers: [3],\n        totalPrice: 80,\n        type: \"lesson\",\n        status: \"confirmed\",\n        createdAt: new Date(\"2024-02-01\")\n      }\n    ]\n\n    // Sample coaches\n    this.coaches = [\n      {\n        id: \"coach_1\",\n        name: \"David Thompson\",\n        email: \"david@golfsim.com\",\n        phone: \"555-0200\",\n        availability: [\n          {\n            id: \"avail_1\",\n            coachId: \"coach_1\",\n            dayOfWeek: 1, // Monday\n            startTime: \"09:00\",\n            endTime: \"17:00\",\n            isAvailable: true\n          },\n          {\n            id: \"avail_2\",\n            coachId: \"coach_1\",\n            dayOfWeek: 2, // Tuesday\n            startTime: \"09:00\",\n            endTime: \"17:00\",\n            isAvailable: true\n          },\n          {\n            id: \"avail_3\",\n            coachId: \"coach_1\",\n            dayOfWeek: 3, // Wednesday\n            startTime: \"09:00\",\n            endTime: \"17:00\",\n            isAvailable: true\n          },\n          {\n            id: \"avail_4\",\n            coachId: \"coach_1\",\n            dayOfWeek: 4, // Thursday\n            startTime: \"09:00\",\n            endTime: \"17:00\",\n            isAvailable: true\n          },\n          {\n            id: \"avail_5\",\n            coachId: \"coach_1\",\n            dayOfWeek: 5, // Friday\n            startTime: \"09:00\",\n            endTime: \"17:00\",\n            isAvailable: true\n          }\n        ],\n        createdAt: new Date(\"2024-01-01\")\n      },\n      {\n        id: \"coach_2\",\n        name: \"Lisa Rodriguez\",\n        email: \"lisa@golfsim.com\",\n        phone: \"555-0201\",\n        availability: [\n          {\n            id: \"avail_6\",\n            coachId: \"coach_2\",\n            dayOfWeek: 6, // Saturday\n            startTime: \"08:00\",\n            endTime: \"16:00\",\n            isAvailable: true\n          },\n          {\n            id: \"avail_7\",\n            coachId: \"coach_2\",\n            dayOfWeek: 0, // Sunday\n            startTime: \"08:00\",\n            endTime: \"16:00\",\n            isAvailable: true\n          }\n        ],\n        createdAt: new Date(\"2024-01-01\")\n      }\n    ]\n\n    // Sample leagues\n    this.leagues = [\n      {\n        id: \"league_1\",\n        name: \"Winter Championship League\",\n        description: \"Competitive 4-man scramble league running through winter months\",\n        format: \"4-man\",\n        matchType: \"lowest-score\",\n        pricePerPerson: 25,\n        maxTeams: 16,\n        bayAllocation: [1, 2, 3, 4],\n        startDate: new Date(\"2024-01-08\"),\n        endDate: new Date(\"2024-03-25\"),\n        dayOfWeek: 1, // Monday\n        startTime: \"18:00\",\n        numberOfWeeks: 12,\n        status: \"in-progress\",\n        createdAt: new Date(\"2023-12-15\")\n      },\n      {\n        id: \"league_2\",\n        name: \"Spring Singles League\",\n        description: \"Individual competition for spring season\",\n        format: \"single\",\n        matchType: \"match-play\",\n        pricePerPerson: 35,\n        maxTeams: 24,\n        bayAllocation: [1, 2, 3, 4, 5, 6],\n        startDate: new Date(\"2024-04-01\"),\n        endDate: new Date(\"2024-06-17\"),\n        dayOfWeek: 3, // Wednesday\n        startTime: \"19:00\",\n        numberOfWeeks: 12,\n        status: \"open\",\n        createdAt: new Date(\"2024-02-01\")\n      }\n    ]\n\n    // Sample discount codes\n    this.discountCodes = [\n      {\n        id: \"discount_1\",\n        code: \"WELCOME20\",\n        description: \"20% off first booking for new customers\",\n        type: \"percentage\",\n        value: 20,\n        maxUses: 100,\n        currentUses: 15,\n        validFrom: new Date(\"2024-01-01\"),\n        validUntil: new Date(\"2024-12-31\"),\n        status: \"active\",\n        createdAt: new Date(\"2024-01-01\")\n      },\n      {\n        id: \"discount_2\",\n        code: \"MEMBER10\",\n        description: \"$10 off for members\",\n        type: \"dollar\",\n        value: 10,\n        maxUses: 500,\n        currentUses: 45,\n        validFrom: new Date(\"2024-01-01\"),\n        validUntil: new Date(\"2024-06-30\"),\n        status: \"active\",\n        createdAt: new Date(\"2024-01-01\")\n      },\n      {\n        id: \"discount_3\",\n        code: \"EXPIRED50\",\n        description: \"50% off - expired promotion\",\n        type: \"percentage\",\n        value: 50,\n        maxUses: 50,\n        currentUses: 50,\n        validFrom: new Date(\"2023-12-01\"),\n        validUntil: new Date(\"2023-12-31\"),\n        status: \"inactive\",\n        createdAt: new Date(\"2023-11-15\")\n      }\n    ]\n\n    // Sample gift cards\n    this.giftCards = [\n      {\n        id: \"gift_1\",\n        code: \"GC-2024-001\",\n        amount: 100,\n        remainingBalance: 100,\n        purchaserName: \"Jennifer Davis\",\n        purchaserEmail: \"jennifer@example.com\",\n        recipientName: \"Tom Davis\",\n        recipientEmail: \"tom@example.com\",\n        status: \"active\",\n        createdAt: new Date(\"2024-01-10\")\n      },\n      {\n        id: \"gift_2\",\n        code: \"GC-2024-002\",\n        amount: 200,\n        remainingBalance: 75,\n        purchaserName: \"Corporate Client\",\n        purchaserEmail: \"hr@company.com\",\n        status: \"active\",\n        createdAt: new Date(\"2024-01-20\"),\n        redeemedAt: new Date(\"2024-01-25\")\n      },\n      {\n        id: \"gift_3\",\n        code: \"GC-2024-003\",\n        amount: 50,\n        remainingBalance: 0,\n        purchaserName: \"Mary Johnson\",\n        purchaserEmail: \"mary@example.com\",\n        recipientName: \"Bob Johnson\",\n        recipientEmail: \"bob@example.com\",\n        status: \"redeemed\",\n        createdAt: new Date(\"2024-02-01\"),\n        redeemedAt: new Date(\"2024-02-05\")\n      }\n    ]\n  }\n\n  public static getInstance(): DataStore {\n    if (typeof globalThis !== 'undefined') {\n      if (!globalThis.__dataStore) {\n        globalThis.__dataStore = new DataStore()\n      }\n      return globalThis.__dataStore\n    }\n    return new DataStore()\n  }\n\n  // Booking methods\n  public addBooking(booking: Booking): void {\n    this.bookings.push(booking)\n    console.log(`Booking added: ${booking.id}. Total bookings: ${this.bookings.length}`)\n  }\n\n  public getBooking(id: string): Booking | undefined {\n    return this.bookings.find(b => b.id === id)\n  }\n\n  public getAllBookings(): Booking[] {\n    return [...this.bookings]\n  }\n\n  public updateBooking(id: string, updates: Partial<Booking>): boolean {\n    const index = this.bookings.findIndex(b => b.id === id)\n    if (index !== -1) {\n      this.bookings[index] = { ...this.bookings[index], ...updates }\n      return true\n    }\n    return false\n  }\n\n  public deleteBooking(id: string): boolean {\n    const index = this.bookings.findIndex(b => b.id === id)\n    if (index !== -1) {\n      this.bookings.splice(index, 1)\n      return true\n    }\n    return false\n  }\n\n  // User methods\n  public addUser(user: User): void {\n    this.users.push(user)\n  }\n\n  public getUser(id: string): User | undefined {\n    return this.users.find(u => u.id === id)\n  }\n\n  public getUserByEmail(email: string): User | undefined {\n    return this.users.find(u => u.email === email)\n  }\n\n  public getAllUsers(): User[] {\n    return [...this.users]\n  }\n\n  // Membership methods\n  public addMembership(membership: Membership): void {\n    this.memberships.push(membership)\n  }\n\n  public getMembership(userId: string): Membership | undefined {\n    return this.memberships.find(m => m.userId === userId)\n  }\n\n  // Coach methods\n  public addCoach(coach: Coach): void {\n    this.coaches.push(coach)\n  }\n\n  public getCoach(id: string): Coach | undefined {\n    return this.coaches.find(c => c.id === id)\n  }\n\n  public getAllCoaches(): Coach[] {\n    return [...this.coaches]\n  }\n\n  // League methods\n  public addLeague(league: League): void {\n    this.leagues.push(league)\n  }\n\n  public getLeague(id: string): League | undefined {\n    return this.leagues.find(l => l.id === id)\n  }\n\n  public getAllLeagues(): League[] {\n    return [...this.leagues]\n  }\n\n  // Gift card methods\n  public addGiftCard(giftCard: GiftCard): void {\n    this.giftCards.push(giftCard)\n  }\n\n  public getGiftCard(code: string): GiftCard | undefined {\n    return this.giftCards.find(gc => gc.code === code)\n  }\n\n  public getAllGiftCards(): GiftCard[] {\n    return [...this.giftCards]\n  }\n\n  // Discount code methods\n  public addDiscountCode(discountCode: DiscountCode): void {\n    this.discountCodes.push(discountCode)\n  }\n\n  public getDiscountCode(code: string): DiscountCode | undefined {\n    return this.discountCodes.find(dc => dc.code === code)\n  }\n\n  public getAllDiscountCodes(): DiscountCode[] {\n    return [...this.discountCodes]\n  }\n}\n\n// Export singleton instance\nexport const dataStore = DataStore.getInstance()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\n// Client-side Supabase client\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Server-side Supabase client with service role key (for admin operations)\nexport const supabaseAdmin = createClient(\n  supabaseUrl,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n)\n\n// Database types based on our existing TypeScript interfaces\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          id: string\n          name: string\n          email: string\n          phone: string\n          password?: string\n          membership_id?: string\n          is_admin?: boolean\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          email: string\n          phone: string\n          password?: string\n          membership_id?: string\n          is_admin?: boolean\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          email?: string\n          phone?: string\n          password?: string\n          membership_id?: string\n          is_admin?: boolean\n          created_at?: string\n        }\n      }\n      bookings: {\n        Row: {\n          id: string\n          user_id?: string\n          guest_name?: string\n          guest_email?: string\n          guest_phone?: string\n          date: string\n          start_time: string\n          end_time: string\n          duration: number\n          number_of_bays: number\n          number_of_people: number\n          bay_numbers: number[]\n          total_price: number\n          type: 'regular' | 'membership' | 'lesson' | 'league'\n          status: 'confirmed' | 'cancelled' | 'completed'\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          user_id?: string\n          guest_name?: string\n          guest_email?: string\n          guest_phone?: string\n          date: string\n          start_time: string\n          end_time: string\n          duration: number\n          number_of_bays: number\n          number_of_people: number\n          bay_numbers: number[]\n          total_price: number\n          type: 'regular' | 'membership' | 'lesson' | 'league'\n          status: 'confirmed' | 'cancelled' | 'completed'\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          guest_name?: string\n          guest_email?: string\n          guest_phone?: string\n          date?: string\n          start_time?: string\n          end_time?: string\n          duration?: number\n          number_of_bays?: number\n          number_of_people?: number\n          bay_numbers?: number[]\n          total_price?: number\n          type?: 'regular' | 'membership' | 'lesson' | 'league'\n          status?: 'confirmed' | 'cancelled' | 'completed'\n          created_at?: string\n        }\n      }\n      memberships: {\n        Row: {\n          id: string\n          user_id: string\n          status: 'active' | 'inactive' | 'cancelled'\n          free_hours_remaining: number\n          billing_date: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          status: 'active' | 'inactive' | 'cancelled'\n          free_hours_remaining: number\n          billing_date: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          status?: 'active' | 'inactive' | 'cancelled'\n          free_hours_remaining?: number\n          billing_date?: string\n          created_at?: string\n        }\n      }\n      coaches: {\n        Row: {\n          id: string\n          name: string\n          email: string\n          phone: string\n          photo?: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          email: string\n          phone: string\n          photo?: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          email?: string\n          phone?: string\n          photo?: string\n          created_at?: string\n        }\n      }\n      coach_availability: {\n        Row: {\n          id: string\n          coach_id: string\n          day_of_week: number\n          start_time: string\n          end_time: string\n          is_available: boolean\n        }\n        Insert: {\n          id?: string\n          coach_id: string\n          day_of_week: number\n          start_time: string\n          end_time: string\n          is_available: boolean\n        }\n        Update: {\n          id?: string\n          coach_id?: string\n          day_of_week?: number\n          start_time?: string\n          end_time?: string\n          is_available?: boolean\n        }\n      }\n      leagues: {\n        Row: {\n          id: string\n          name: string\n          description: string\n          format: 'single' | '2-man' | '4-man'\n          match_type: 'lowest-score' | 'match-play'\n          price_per_person: number\n          max_teams: number\n          bay_allocation: number[]\n          start_date: string\n          end_date: string\n          day_of_week: number\n          start_time: string\n          number_of_weeks: number\n          status: 'open' | 'closed' | 'in-progress' | 'completed'\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          description: string\n          format: 'single' | '2-man' | '4-man'\n          match_type: 'lowest-score' | 'match-play'\n          price_per_person: number\n          max_teams: number\n          bay_allocation: number[]\n          start_date: string\n          end_date: string\n          day_of_week: number\n          start_time: string\n          number_of_weeks: number\n          status: 'open' | 'closed' | 'in-progress' | 'completed'\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          description?: string\n          format?: 'single' | '2-man' | '4-man'\n          match_type?: 'lowest-score' | 'match-play'\n          price_per_person?: number\n          max_teams?: number\n          bay_allocation?: number[]\n          start_date?: string\n          end_date?: string\n          day_of_week?: number\n          start_time?: string\n          number_of_weeks?: number\n          status?: 'open' | 'closed' | 'in-progress' | 'completed'\n          created_at?: string\n        }\n      }\n      gift_cards: {\n        Row: {\n          id: string\n          code: string\n          amount: number\n          remaining_balance: number\n          purchaser_name: string\n          purchaser_email: string\n          recipient_name?: string\n          recipient_email?: string\n          status: 'active' | 'redeemed' | 'expired'\n          created_at: string\n          redeemed_at?: string\n        }\n        Insert: {\n          id?: string\n          code: string\n          amount: number\n          remaining_balance: number\n          purchaser_name: string\n          purchaser_email: string\n          recipient_name?: string\n          recipient_email?: string\n          status: 'active' | 'redeemed' | 'expired'\n          created_at?: string\n          redeemed_at?: string\n        }\n        Update: {\n          id?: string\n          code?: string\n          amount?: number\n          remaining_balance?: number\n          purchaser_name?: string\n          purchaser_email?: string\n          recipient_name?: string\n          recipient_email?: string\n          status?: 'active' | 'redeemed' | 'expired'\n          created_at?: string\n          redeemed_at?: string\n        }\n      }\n      discount_codes: {\n        Row: {\n          id: string\n          code: string\n          description: string\n          type: 'percentage' | 'dollar'\n          value: number\n          max_uses: number\n          current_uses: number\n          valid_from: string\n          valid_until: string\n          status: 'active' | 'inactive'\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          code: string\n          description: string\n          type: 'percentage' | 'dollar'\n          value: number\n          max_uses: number\n          current_uses: number\n          valid_from: string\n          valid_until: string\n          status: 'active' | 'inactive'\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          code?: string\n          description?: string\n          type?: 'percentage' | 'dollar'\n          value?: number\n          max_uses?: number\n          current_uses?: number\n          valid_from?: string\n          valid_until?: string\n          status?: 'active' | 'inactive'\n          created_at?: string\n        }\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AAEoB;AAFpB;;AAEA,MAAM;AACN,MAAM;AAGC,MAAM,WAAW,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,MAAM,gBAAgB,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EACtC,aACA,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,yBAAyB,EACrC;IACE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;IAClB;AACF","debugId":null}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/supabase-store.ts"],"sourcesContent":["import { supabase, supabaseAdmin } from './supabase'\nimport { Booking, User, Membership, Coach, League, GiftCard, DiscountCode, CoachAvailability } from './types'\n\n// Supabase-based data store implementation\nexport class SupabaseStore {\n  // User methods\n  async addUser(user: User): Promise<User> {\n    const { data, error } = await supabaseAdmin\n      .from('users')\n      .insert([{\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        password: user.password,\n        membership_id: user.membershipId,\n        is_admin: user.isAdmin || false,\n        created_at: user.createdAt.toISOString()\n      }])\n      .select()\n      .single()\n\n    if (error) throw error\n    return this.mapUserFromDb(data)\n  }\n\n  async getUser(id: string): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', id)\n      .single()\n\n    if (error) {\n      if (error.code === 'PGRST116') return null // Not found\n      throw error\n    }\n    return this.mapUserFromDb(data)\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('email', email)\n      .single()\n\n    if (error) {\n      if (error.code === 'PGRST116') return null // Not found\n      throw error\n    }\n    return this.mapUserFromDb(data)\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .order('created_at', { ascending: false })\n\n    if (error) throw error\n    return data.map(this.mapUserFromDb)\n  }\n\n  // Booking methods\n  async addBooking(booking: Booking): Promise<Booking> {\n    const { data, error } = await supabase\n      .from('bookings')\n      .insert([{\n        id: booking.id,\n        user_id: booking.userId,\n        guest_name: booking.guestName,\n        guest_email: booking.guestEmail,\n        guest_phone: booking.guestPhone,\n        date: booking.date.toISOString().split('T')[0],\n        start_time: booking.startTime,\n        end_time: booking.endTime,\n        duration: booking.duration,\n        number_of_bays: booking.numberOfBays,\n        number_of_people: booking.numberOfPeople,\n        bay_numbers: booking.bayNumbers,\n        total_price: booking.totalPrice,\n        type: booking.type,\n        status: booking.status,\n        created_at: booking.createdAt.toISOString()\n      }])\n      .select()\n      .single()\n\n    if (error) throw error\n    return this.mapBookingFromDb(data)\n  }\n\n  async getBooking(id: string): Promise<Booking | null> {\n    const { data, error } = await supabase\n      .from('bookings')\n      .select('*')\n      .eq('id', id)\n      .single()\n\n    if (error) {\n      if (error.code === 'PGRST116') return null // Not found\n      throw error\n    }\n    return this.mapBookingFromDb(data)\n  }\n\n  async getAllBookings(): Promise<Booking[]> {\n    const { data, error } = await supabase\n      .from('bookings')\n      .select('*')\n      .order('created_at', { ascending: false })\n\n    if (error) throw error\n    return data.map(this.mapBookingFromDb)\n  }\n\n  async updateBooking(id: string, updates: Partial<Booking>): Promise<boolean> {\n    const dbUpdates: any = {}\n    \n    if (updates.userId !== undefined) dbUpdates.user_id = updates.userId\n    if (updates.guestName !== undefined) dbUpdates.guest_name = updates.guestName\n    if (updates.guestEmail !== undefined) dbUpdates.guest_email = updates.guestEmail\n    if (updates.guestPhone !== undefined) dbUpdates.guest_phone = updates.guestPhone\n    if (updates.date !== undefined) dbUpdates.date = updates.date.toISOString().split('T')[0]\n    if (updates.startTime !== undefined) dbUpdates.start_time = updates.startTime\n    if (updates.endTime !== undefined) dbUpdates.end_time = updates.endTime\n    if (updates.duration !== undefined) dbUpdates.duration = updates.duration\n    if (updates.numberOfBays !== undefined) dbUpdates.number_of_bays = updates.numberOfBays\n    if (updates.numberOfPeople !== undefined) dbUpdates.number_of_people = updates.numberOfPeople\n    if (updates.bayNumbers !== undefined) dbUpdates.bay_numbers = updates.bayNumbers\n    if (updates.totalPrice !== undefined) dbUpdates.total_price = updates.totalPrice\n    if (updates.type !== undefined) dbUpdates.type = updates.type\n    if (updates.status !== undefined) dbUpdates.status = updates.status\n\n    const { error } = await supabase\n      .from('bookings')\n      .update(dbUpdates)\n      .eq('id', id)\n\n    if (error) throw error\n    return true\n  }\n\n  async deleteBooking(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('bookings')\n      .delete()\n      .eq('id', id)\n\n    if (error) throw error\n    return true\n  }\n\n  // Membership methods\n  async addMembership(membership: Membership): Promise<Membership> {\n    const { data, error } = await supabase\n      .from('memberships')\n      .insert([{\n        id: membership.id,\n        user_id: membership.userId,\n        status: membership.status,\n        free_hours_remaining: membership.freeHoursRemaining,\n        billing_date: membership.billingDate.toISOString(),\n        created_at: membership.createdAt.toISOString()\n      }])\n      .select()\n      .single()\n\n    if (error) throw error\n    return this.mapMembershipFromDb(data)\n  }\n\n  async getMembership(userId: string): Promise<Membership | null> {\n    const { data, error } = await supabase\n      .from('memberships')\n      .select('*')\n      .eq('user_id', userId)\n      .single()\n\n    if (error) {\n      if (error.code === 'PGRST116') return null // Not found\n      throw error\n    }\n    return this.mapMembershipFromDb(data)\n  }\n\n  // Coach methods\n  async addCoach(coach: Coach): Promise<Coach> {\n    const { data, error } = await supabase\n      .from('coaches')\n      .insert([{\n        id: coach.id,\n        name: coach.name,\n        email: coach.email,\n        phone: coach.phone,\n        photo: coach.photo,\n        created_at: coach.createdAt.toISOString()\n      }])\n      .select()\n      .single()\n\n    if (error) throw error\n\n    // Insert availability records\n    if (coach.availability.length > 0) {\n      const { error: availError } = await supabase\n        .from('coach_availability')\n        .insert(coach.availability.map(avail => ({\n          id: avail.id,\n          coach_id: avail.coachId,\n          day_of_week: avail.dayOfWeek,\n          start_time: avail.startTime,\n          end_time: avail.endTime,\n          is_available: avail.isAvailable\n        })))\n\n      if (availError) throw availError\n    }\n\n    return this.mapCoachFromDb(data, coach.availability)\n  }\n\n  async getCoach(id: string): Promise<Coach | null> {\n    const { data, error } = await supabase\n      .from('coaches')\n      .select('*')\n      .eq('id', id)\n      .single()\n\n    if (error) {\n      if (error.code === 'PGRST116') return null // Not found\n      throw error\n    }\n\n    // Get availability\n    const { data: availData, error: availError } = await supabase\n      .from('coach_availability')\n      .select('*')\n      .eq('coach_id', id)\n\n    if (availError) throw availError\n\n    const availability = availData.map(this.mapAvailabilityFromDb)\n    return this.mapCoachFromDb(data, availability)\n  }\n\n  async getAllCoaches(): Promise<Coach[]> {\n    const { data, error } = await supabase\n      .from('coaches')\n      .select('*')\n      .order('created_at', { ascending: false })\n\n    if (error) throw error\n\n    // Get all availability records\n    const { data: availData, error: availError } = await supabase\n      .from('coach_availability')\n      .select('*')\n\n    if (availError) throw availError\n\n    return data.map(coach => {\n      const availability = availData\n        .filter(avail => avail.coach_id === coach.id)\n        .map(this.mapAvailabilityFromDb)\n      return this.mapCoachFromDb(coach, availability)\n    })\n  }\n\n  // League methods\n  async addLeague(league: League): Promise<League> {\n    const { data, error } = await supabase\n      .from('leagues')\n      .insert([{\n        id: league.id,\n        name: league.name,\n        description: league.description,\n        format: league.format,\n        match_type: league.matchType,\n        price_per_person: league.pricePerPerson,\n        max_teams: league.maxTeams,\n        bay_allocation: league.bayAllocation,\n        start_date: league.startDate.toISOString().split('T')[0],\n        end_date: league.endDate.toISOString().split('T')[0],\n        day_of_week: league.dayOfWeek,\n        start_time: league.startTime,\n        number_of_weeks: league.numberOfWeeks,\n        status: league.status,\n        created_at: league.createdAt.toISOString()\n      }])\n      .select()\n      .single()\n\n    if (error) throw error\n    return this.mapLeagueFromDb(data)\n  }\n\n  async getLeague(id: string): Promise<League | null> {\n    const { data, error } = await supabase\n      .from('leagues')\n      .select('*')\n      .eq('id', id)\n      .single()\n\n    if (error) {\n      if (error.code === 'PGRST116') return null // Not found\n      throw error\n    }\n    return this.mapLeagueFromDb(data)\n  }\n\n  async getAllLeagues(): Promise<League[]> {\n    const { data, error } = await supabase\n      .from('leagues')\n      .select('*')\n      .order('created_at', { ascending: false })\n\n    if (error) throw error\n    return data.map(this.mapLeagueFromDb)\n  }\n\n  // Gift card methods\n  async addGiftCard(giftCard: GiftCard): Promise<GiftCard> {\n    const { data, error } = await supabase\n      .from('gift_cards')\n      .insert([{\n        id: giftCard.id,\n        code: giftCard.code,\n        amount: giftCard.amount,\n        remaining_balance: giftCard.remainingBalance,\n        purchaser_name: giftCard.purchaserName,\n        purchaser_email: giftCard.purchaserEmail,\n        recipient_name: giftCard.recipientName,\n        recipient_email: giftCard.recipientEmail,\n        status: giftCard.status,\n        created_at: giftCard.createdAt.toISOString(),\n        redeemed_at: giftCard.redeemedAt?.toISOString()\n      }])\n      .select()\n      .single()\n\n    if (error) throw error\n    return this.mapGiftCardFromDb(data)\n  }\n\n  async getGiftCard(code: string): Promise<GiftCard | null> {\n    const { data, error } = await supabase\n      .from('gift_cards')\n      .select('*')\n      .eq('code', code)\n      .single()\n\n    if (error) {\n      if (error.code === 'PGRST116') return null // Not found\n      throw error\n    }\n    return this.mapGiftCardFromDb(data)\n  }\n\n  async getAllGiftCards(): Promise<GiftCard[]> {\n    const { data, error } = await supabase\n      .from('gift_cards')\n      .select('*')\n      .order('created_at', { ascending: false })\n\n    if (error) throw error\n    return data.map(this.mapGiftCardFromDb)\n  }\n\n  // Discount code methods\n  async addDiscountCode(discountCode: DiscountCode): Promise<DiscountCode> {\n    const { data, error } = await supabase\n      .from('discount_codes')\n      .insert([{\n        id: discountCode.id,\n        code: discountCode.code,\n        description: discountCode.description,\n        type: discountCode.type,\n        value: discountCode.value,\n        max_uses: discountCode.maxUses,\n        current_uses: discountCode.currentUses,\n        valid_from: discountCode.validFrom.toISOString(),\n        valid_until: discountCode.validUntil.toISOString(),\n        status: discountCode.status,\n        created_at: discountCode.createdAt.toISOString()\n      }])\n      .select()\n      .single()\n\n    if (error) throw error\n    return this.mapDiscountCodeFromDb(data)\n  }\n\n  async getDiscountCode(code: string): Promise<DiscountCode | null> {\n    const { data, error } = await supabase\n      .from('discount_codes')\n      .select('*')\n      .eq('code', code)\n      .single()\n\n    if (error) {\n      if (error.code === 'PGRST116') return null // Not found\n      throw error\n    }\n    return this.mapDiscountCodeFromDb(data)\n  }\n\n  async getAllDiscountCodes(): Promise<DiscountCode[]> {\n    const { data, error } = await supabase\n      .from('discount_codes')\n      .select('*')\n      .order('created_at', { ascending: false })\n\n    if (error) throw error\n    return data.map(this.mapDiscountCodeFromDb)\n  }\n\n  // Mapping functions to convert between database format and TypeScript interfaces\n  private mapUserFromDb(data: any): User {\n    return {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      password: data.password,\n      membershipId: data.membership_id,\n      isAdmin: data.is_admin,\n      createdAt: new Date(data.created_at)\n    }\n  }\n\n  private mapBookingFromDb(data: any): Booking {\n    return {\n      id: data.id,\n      userId: data.user_id,\n      guestName: data.guest_name,\n      guestEmail: data.guest_email,\n      guestPhone: data.guest_phone,\n      date: new Date(data.date),\n      startTime: data.start_time,\n      endTime: data.end_time,\n      duration: data.duration,\n      numberOfBays: data.number_of_bays,\n      numberOfPeople: data.number_of_people,\n      bayNumbers: data.bay_numbers,\n      totalPrice: data.total_price,\n      type: data.type,\n      status: data.status,\n      createdAt: new Date(data.created_at)\n    }\n  }\n\n  private mapMembershipFromDb(data: any): Membership {\n    return {\n      id: data.id,\n      userId: data.user_id,\n      status: data.status,\n      freeHoursRemaining: data.free_hours_remaining,\n      billingDate: new Date(data.billing_date),\n      createdAt: new Date(data.created_at)\n    }\n  }\n\n  private mapCoachFromDb(data: any, availability: CoachAvailability[]): Coach {\n    return {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      photo: data.photo,\n      availability,\n      createdAt: new Date(data.created_at)\n    }\n  }\n\n  private mapAvailabilityFromDb(data: any): CoachAvailability {\n    return {\n      id: data.id,\n      coachId: data.coach_id,\n      dayOfWeek: data.day_of_week,\n      startTime: data.start_time,\n      endTime: data.end_time,\n      isAvailable: data.is_available\n    }\n  }\n\n  private mapLeagueFromDb(data: any): League {\n    return {\n      id: data.id,\n      name: data.name,\n      description: data.description,\n      format: data.format,\n      matchType: data.match_type,\n      pricePerPerson: data.price_per_person,\n      maxTeams: data.max_teams,\n      bayAllocation: data.bay_allocation,\n      startDate: new Date(data.start_date),\n      endDate: new Date(data.end_date),\n      dayOfWeek: data.day_of_week,\n      startTime: data.start_time,\n      numberOfWeeks: data.number_of_weeks,\n      status: data.status,\n      createdAt: new Date(data.created_at)\n    }\n  }\n\n  private mapGiftCardFromDb(data: any): GiftCard {\n    return {\n      id: data.id,\n      code: data.code,\n      amount: data.amount,\n      remainingBalance: data.remaining_balance,\n      purchaserName: data.purchaser_name,\n      purchaserEmail: data.purchaser_email,\n      recipientName: data.recipient_name,\n      recipientEmail: data.recipient_email,\n      status: data.status,\n      createdAt: new Date(data.created_at),\n      redeemedAt: data.redeemed_at ? new Date(data.redeemed_at) : undefined\n    }\n  }\n\n  private mapDiscountCodeFromDb(data: any): DiscountCode {\n    return {\n      id: data.id,\n      code: data.code,\n      description: data.description,\n      type: data.type,\n      value: data.value,\n      maxUses: data.max_uses,\n      currentUses: data.current_uses,\n      validFrom: new Date(data.valid_from),\n      validUntil: new Date(data.valid_until),\n      status: data.status,\n      createdAt: new Date(data.created_at)\n    }\n  }\n}\n\n// Export singleton instance\nexport const supabaseStore = new SupabaseStore()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 912, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/migrate-to-supabase.ts"],"sourcesContent":["import { dataStore } from './data-store'\nimport { supabaseStore } from './supabase-store'\n\n// Migration utility to transfer data from in-memory store to Supabase\nexport async function migrateDataToSupabase() {\n  console.log('Starting migration to Supabase...')\n  \n  try {\n    // Migrate users first (needed for foreign key relationships)\n    console.log('Migrating users...')\n    const users = dataStore.getAllUsers()\n    for (const user of users) {\n      try {\n        await supabaseStore.addUser(user)\n        console.log(`✓ Migrated user: ${user.email}`)\n      } catch (error: any) {\n        if (error.code === '23505') { // Unique constraint violation\n          console.log(`- User already exists: ${user.email}`)\n        } else {\n          console.error(`✗ Failed to migrate user ${user.email}:`, error.message)\n        }\n      }\n    }\n\n    // Migrate memberships\n    console.log('Migrating memberships...')\n    const memberships = dataStore.getAllUsers()\n      .filter(user => user.membershipId)\n      .map(user => {\n        const membership = dataStore.getMembership(user.id)\n        return membership\n      })\n      .filter(Boolean)\n\n    for (const membership of memberships) {\n      if (membership) {\n        try {\n          await supabaseStore.addMembership(membership)\n          console.log(`✓ Migrated membership: ${membership.id}`)\n        } catch (error: any) {\n          if (error.code === '23505') {\n            console.log(`- Membership already exists: ${membership.id}`)\n          } else {\n            console.error(`✗ Failed to migrate membership ${membership.id}:`, error.message)\n          }\n        }\n      }\n    }\n\n    // Migrate coaches\n    console.log('Migrating coaches...')\n    const coaches = dataStore.getAllCoaches()\n    for (const coach of coaches) {\n      try {\n        await supabaseStore.addCoach(coach)\n        console.log(`✓ Migrated coach: ${coach.name}`)\n      } catch (error: any) {\n        if (error.code === '23505') {\n          console.log(`- Coach already exists: ${coach.name}`)\n        } else {\n          console.error(`✗ Failed to migrate coach ${coach.name}:`, error.message)\n        }\n      }\n    }\n\n    // Migrate leagues\n    console.log('Migrating leagues...')\n    const leagues = dataStore.getAllLeagues()\n    for (const league of leagues) {\n      try {\n        await supabaseStore.addLeague(league)\n        console.log(`✓ Migrated league: ${league.name}`)\n      } catch (error: any) {\n        if (error.code === '23505') {\n          console.log(`- League already exists: ${league.name}`)\n        } else {\n          console.error(`✗ Failed to migrate league ${league.name}:`, error.message)\n        }\n      }\n    }\n\n    // Migrate bookings\n    console.log('Migrating bookings...')\n    const bookings = dataStore.getAllBookings()\n    for (const booking of bookings) {\n      try {\n        await supabaseStore.addBooking(booking)\n        console.log(`✓ Migrated booking: ${booking.id}`)\n      } catch (error: any) {\n        if (error.code === '23505') {\n          console.log(`- Booking already exists: ${booking.id}`)\n        } else {\n          console.error(`✗ Failed to migrate booking ${booking.id}:`, error.message)\n        }\n      }\n    }\n\n    // Migrate gift cards\n    console.log('Migrating gift cards...')\n    const giftCards = dataStore.getAllGiftCards()\n    for (const giftCard of giftCards) {\n      try {\n        await supabaseStore.addGiftCard(giftCard)\n        console.log(`✓ Migrated gift card: ${giftCard.code}`)\n      } catch (error: any) {\n        if (error.code === '23505') {\n          console.log(`- Gift card already exists: ${giftCard.code}`)\n        } else {\n          console.error(`✗ Failed to migrate gift card ${giftCard.code}:`, error.message)\n        }\n      }\n    }\n\n    // Migrate discount codes\n    console.log('Migrating discount codes...')\n    const discountCodes = dataStore.getAllDiscountCodes()\n    for (const discountCode of discountCodes) {\n      try {\n        await supabaseStore.addDiscountCode(discountCode)\n        console.log(`✓ Migrated discount code: ${discountCode.code}`)\n      } catch (error: any) {\n        if (error.code === '23505') {\n          console.log(`- Discount code already exists: ${discountCode.code}`)\n        } else {\n          console.error(`✗ Failed to migrate discount code ${discountCode.code}:`, error.message)\n        }\n      }\n    }\n\n    console.log('✅ Migration completed successfully!')\n    return { success: true, message: 'All data migrated to Supabase' }\n\n  } catch (error) {\n    console.error('❌ Migration failed:', error)\n    return { success: false, message: `Migration failed: ${error}` }\n  }\n}\n\n// Test connection to Supabase\nexport async function testSupabaseConnection() {\n  try {\n    console.log('Testing Supabase connection...')\n    const users = await supabaseStore.getAllUsers()\n    console.log(`✅ Connection successful! Found ${users.length} users in database.`)\n    return { success: true, userCount: users.length }\n  } catch (error) {\n    console.error('❌ Supabase connection failed:', error)\n    return { success: false, error: error }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1072, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport { format, parse, isAfter, isBefore, addMinutes, differenceInMinutes } from \"date-fns\"\nimport { OperatingHours, PricingTier } from \"./types\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// Operating hours configuration\nexport const OPERATING_HOURS: OperatingHours = {\n  monday: { open: \"10:00\", close: \"22:00\" },\n  tuesday: { open: \"10:00\", close: \"22:00\" },\n  wednesday: { open: \"10:00\", close: \"22:00\" },\n  thursday: { open: \"10:00\", close: \"22:00\" },\n  friday: { open: \"10:00\", close: \"24:00\" },\n  saturday: { open: \"09:00\", close: \"24:00\" },\n  sunday: { open: \"10:00\", close: \"22:00\" },\n}\n\n// Pricing tiers\nexport const PRICING_TIERS: PricingTier[] = [\n  {\n    name: \"Off-Peak\",\n    rate: 50,\n    conditions: {\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"],\n      timeRange: { start: \"10:00\", end: \"17:00\" }\n    }\n  },\n  {\n    name: \"Peak\",\n    rate: 60,\n    conditions: {\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"],\n      timeRange: { start: \"17:00\", end: \"24:00\" }\n    }\n  },\n  {\n    name: \"Weekend\",\n    rate: 60,\n    conditions: {\n      days: [\"saturday\", \"sunday\"],\n      timeRange: { start: \"09:00\", end: \"24:00\" }\n    }\n  }\n]\n\n// Membership pricing\nexport const MEMBERSHIP_RATES = {\n  monthly: 90,\n  freeHours: 2,\n  discountedRate: 40,\n  membershipHourValue: 45\n}\n\n// Bay configuration\nexport const BAY_CONFIG = {\n  totalBays: 5,\n  maxBaysPerBooking: 2,\n  maxSimultaneousBookings: 5\n}\n\n// Time slot utilities\nexport function generateTimeSlots(date: Date): string[] {\n  const dayName = format(date, 'EEEE').toLowerCase()\n  const hours = OPERATING_HOURS[dayName]\n  \n  if (!hours) return []\n  \n  const slots: string[] = []\n  const startTime = parse(hours.open, 'HH:mm', new Date())\n  const endTime = parse(hours.close === '24:00' ? '23:59' : hours.close, 'HH:mm', new Date())\n  \n  let currentTime = startTime\n  \n  while (isBefore(currentTime, endTime)) {\n    slots.push(format(currentTime, 'HH:mm'))\n    currentTime = addMinutes(currentTime, 30)\n  }\n  \n  return slots\n}\n\n// Pricing calculation\nexport function calculateBookingPrice(\n  date: Date,\n  startTime: string,\n  duration: number,\n  numberOfBays: number,\n  isMember: boolean = false,\n  membershipHoursUsed: number = 0\n): {\n  basePrice: number\n  membershipDiscount: number\n  totalPrice: number\n  membershipHoursApplied: number\n} {\n  const dayName = format(date, 'EEEE').toLowerCase()\n  const timeSlot = parse(startTime, 'HH:mm', new Date())\n  \n  // Find applicable pricing tier\n  let hourlyRate = 60 // default weekend rate\n  \n  for (const tier of PRICING_TIERS) {\n    if (tier.conditions.days.includes(dayName)) {\n      const tierStart = parse(tier.conditions.timeRange.start, 'HH:mm', new Date())\n      const tierEnd = parse(tier.conditions.timeRange.end === '24:00' ? '23:59' : tier.conditions.timeRange.end, 'HH:mm', new Date())\n      \n      if (!isBefore(timeSlot, tierStart) && isBefore(timeSlot, tierEnd)) {\n        hourlyRate = tier.rate\n        break\n      }\n    }\n  }\n  \n  const totalHours = duration * numberOfBays\n  const basePrice = totalHours * hourlyRate\n  \n  if (!isMember) {\n    return {\n      basePrice,\n      membershipDiscount: 0,\n      totalPrice: basePrice,\n      membershipHoursApplied: 0\n    }\n  }\n  \n  // Apply membership benefits\n  const freeHoursAvailable = Math.max(0, MEMBERSHIP_RATES.freeHours - membershipHoursUsed)\n  const freeHoursToApply = Math.min(freeHoursAvailable, totalHours)\n  const paidHours = totalHours - freeHoursToApply\n  \n  const membershipDiscount = freeHoursToApply * hourlyRate + paidHours * (hourlyRate - MEMBERSHIP_RATES.discountedRate)\n  const totalPrice = basePrice - membershipDiscount\n  \n  return {\n    basePrice,\n    membershipDiscount,\n    totalPrice,\n    membershipHoursApplied: freeHoursToApply\n  }\n}\n\n// Validation utilities\nexport function isValidTimeSlot(date: Date, time: string): boolean {\n  const dayName = format(date, 'EEEE').toLowerCase()\n  const hours = OPERATING_HOURS[dayName]\n  \n  if (!hours) return false\n  \n  const timeSlot = parse(time, 'HH:mm', new Date())\n  const openTime = parse(hours.open, 'HH:mm', new Date())\n  const closeTime = parse(hours.close === '24:00' ? '23:59' : hours.close, 'HH:mm', new Date())\n  \n  return !isBefore(timeSlot, openTime) && isBefore(timeSlot, closeTime)\n}\n\nexport function isValidDuration(startTime: string, duration: number, date: Date): boolean {\n  const dayName = format(date, 'EEEE').toLowerCase()\n  const hours = OPERATING_HOURS[dayName]\n  \n  if (!hours) return false\n  \n  const start = parse(startTime, 'HH:mm', new Date())\n  const end = addMinutes(start, duration * 60)\n  const closeTime = parse(hours.close === '24:00' ? '23:59' : hours.close, 'HH:mm', new Date())\n  \n  return !isAfter(end, closeTime) && duration >= 1 && duration <= 4\n}\n\n// Gift card utilities\nexport function generateGiftCardCode(): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let result = ''\n  for (let i = 0; i < 12; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return result\n}\n\n// Email validation\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\n// Phone validation\nexport function isValidPhone(phone: string): boolean {\n  const phoneRegex = /^\\+?[\\d\\s\\-\\(\\)]{10,}$/\n  return phoneRegex.test(phone)\n}\n\n// Format currency\nexport function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(amount)\n}\n\n// Format time\nexport function formatTime(time: string): string {\n  const parsed = parse(time, 'HH:mm', new Date())\n  return format(parsed, 'h:mm a')\n}\n\n// Calculate duration between times\nexport function calculateDuration(startTime: string, endTime: string): number {\n  const start = parse(startTime, 'HH:mm', new Date())\n  const end = parse(endTime, 'HH:mm', new Date())\n  return differenceInMinutes(end, start) / 60\n}\n\n// Mock data generators for development\nexport function generateMockBookings(count: number = 10) {\n  // This will be used for development/testing\n  return []\n}\n\nexport function generateMockUsers(count: number = 5) {\n  // This will be used for development/testing\n  return []\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1315, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf;KAnBS","debugId":null}},
    {"offset": {"line": 1378, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf;MARS","debugId":null}},
    {"offset": {"line": 1493, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,qOACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,GAAG,OAC8D;IACjE,qBACE,6LAAC;QACC,aAAU;QACV,MAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf;KAbS;AAeT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+DACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,iBAAiB,EACxB,SAAS,EACT,GAAG,OACyB;IAC5B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kGACA;QAED,GAAG,KAAK;;;;;;AAGf;MAdS","debugId":null}},
    {"offset": {"line": 1568, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/supabase-test/page.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState } from 'react'\nimport { testSupabaseConnection, migrateDataToSupabase } from '@/lib/migrate-to-supabase'\nimport { supabaseStore } from '@/lib/supabase-store'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\n\nexport default function SupabaseTestPage() {\n  const [connectionResult, setConnectionResult] = useState<any>(null)\n  const [migrationResult, setMigrationResult] = useState<any>(null)\n  const [testData, setTestData] = useState<any>(null)\n  const [loading, setLoading] = useState(false)\n\n  const handleTestConnection = async () => {\n    setLoading(true)\n    try {\n      const result = await testSupabaseConnection()\n      setConnectionResult(result)\n    } catch (error) {\n      setConnectionResult({ success: false, error: error })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleMigration = async () => {\n    setLoading(true)\n    try {\n      const result = await migrateDataToSupabase()\n      setMigrationResult(result)\n    } catch (error) {\n      setMigrationResult({ success: false, message: `Migration failed: ${error}` })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleTestQueries = async () => {\n    setLoading(true)\n    try {\n      const [users, bookings, coaches, leagues, giftCards, discountCodes] = await Promise.all([\n        supabaseStore.getAllUsers(),\n        supabaseStore.getAllBookings(),\n        supabaseStore.getAllCoaches(),\n        supabaseStore.getAllLeagues(),\n        supabaseStore.getAllGiftCards(),\n        supabaseStore.getAllDiscountCodes()\n      ])\n\n      setTestData({\n        users: users.length,\n        bookings: bookings.length,\n        coaches: coaches.length,\n        leagues: leagues.length,\n        giftCards: giftCards.length,\n        discountCodes: discountCodes.length,\n        sampleUser: users[0],\n        sampleBooking: bookings[0]\n      })\n    } catch (error) {\n      setTestData({ error: error })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4\">\n      <div className=\"max-w-4xl mx-auto space-y-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Supabase Integration Test</h1>\n          <p className=\"text-gray-600 mt-2\">Test Supabase connection and data migration</p>\n        </div>\n\n        {/* Connection Test */}\n        <Card>\n          <CardHeader>\n            <CardTitle>1. Test Supabase Connection</CardTitle>\n            <CardDescription>\n              Verify that the application can connect to Supabase\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button onClick={handleTestConnection} disabled={loading}>\n              {loading ? 'Testing...' : 'Test Connection'}\n            </Button>\n            \n            {connectionResult && (\n              <Alert variant={connectionResult.success ? \"default\" : \"destructive\"}>\n                <AlertDescription>\n                  {connectionResult.success \n                    ? `✅ Connection successful! Found ${connectionResult.userCount} users in database.`\n                    : `❌ Connection failed: ${connectionResult.error}`\n                  }\n                </AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Migration */}\n        <Card>\n          <CardHeader>\n            <CardTitle>2. Migrate Data to Supabase</CardTitle>\n            <CardDescription>\n              Transfer all data from in-memory store to Supabase database\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4\">\n              <p className=\"text-yellow-800 text-sm\">\n                <strong>Important:</strong> Make sure you have run the SQL migration script in Supabase SQL Editor first!\n              </p>\n            </div>\n            \n            <Button onClick={handleMigration} disabled={loading}>\n              {loading ? 'Migrating...' : 'Run Migration'}\n            </Button>\n            \n            {migrationResult && (\n              <Alert variant={migrationResult.success ? \"default\" : \"destructive\"}>\n                <AlertDescription>\n                  {migrationResult.success \n                    ? `✅ ${migrationResult.message}`\n                    : `❌ ${migrationResult.message}`\n                  }\n                </AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Test Queries */}\n        <Card>\n          <CardHeader>\n            <CardTitle>3. Test Database Queries</CardTitle>\n            <CardDescription>\n              Verify that data can be read from Supabase\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button onClick={handleTestQueries} disabled={loading}>\n              {loading ? 'Testing...' : 'Test Queries'}\n            </Button>\n            \n            {testData && (\n              <div className=\"space-y-4\">\n                {testData.error ? (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>\n                      ❌ Query failed: {testData.error.toString()}\n                    </AlertDescription>\n                  </Alert>\n                ) : (\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                    <div className=\"bg-white p-4 rounded-lg shadow\">\n                      <h3 className=\"font-medium text-gray-900\">Users</h3>\n                      <p className=\"text-2xl font-bold text-blue-600\">{testData.users}</p>\n                    </div>\n                    <div className=\"bg-white p-4 rounded-lg shadow\">\n                      <h3 className=\"font-medium text-gray-900\">Bookings</h3>\n                      <p className=\"text-2xl font-bold text-green-600\">{testData.bookings}</p>\n                    </div>\n                    <div className=\"bg-white p-4 rounded-lg shadow\">\n                      <h3 className=\"font-medium text-gray-900\">Coaches</h3>\n                      <p className=\"text-2xl font-bold text-purple-600\">{testData.coaches}</p>\n                    </div>\n                    <div className=\"bg-white p-4 rounded-lg shadow\">\n                      <h3 className=\"font-medium text-gray-900\">Leagues</h3>\n                      <p className=\"text-2xl font-bold text-orange-600\">{testData.leagues}</p>\n                    </div>\n                    <div className=\"bg-white p-4 rounded-lg shadow\">\n                      <h3 className=\"font-medium text-gray-900\">Gift Cards</h3>\n                      <p className=\"text-2xl font-bold text-pink-600\">{testData.giftCards}</p>\n                    </div>\n                    <div className=\"bg-white p-4 rounded-lg shadow\">\n                      <h3 className=\"font-medium text-gray-900\">Discount Codes</h3>\n                      <p className=\"text-2xl font-bold text-indigo-600\">{testData.discountCodes}</p>\n                    </div>\n                  </div>\n                )}\n\n                {testData.sampleUser && (\n                  <div className=\"bg-white p-4 rounded-lg shadow\">\n                    <h3 className=\"font-medium text-gray-900 mb-2\">Sample User Data</h3>\n                    <pre className=\"text-sm text-gray-600 overflow-x-auto\">\n                      {JSON.stringify(testData.sampleUser, null, 2)}\n                    </pre>\n                  </div>\n                )}\n\n                {testData.sampleBooking && (\n                  <div className=\"bg-white p-4 rounded-lg shadow\">\n                    <h3 className=\"font-medium text-gray-900 mb-2\">Sample Booking Data</h3>\n                    <pre className=\"text-sm text-gray-600 overflow-x-auto\">\n                      {JSON.stringify(testData.sampleBooking, null, 2)}\n                    </pre>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Instructions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Setup Instructions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">1. Run SQL Migration</h4>\n              <p className=\"text-sm text-gray-600\">\n                Copy the contents of <code>supabase-migration.sql</code> and run it in your Supabase SQL Editor.\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">2. Test Connection</h4>\n              <p className=\"text-sm text-gray-600\">\n                Click \"Test Connection\" to verify your Supabase credentials are working.\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">3. Migrate Data</h4>\n              <p className=\"text-sm text-gray-600\">\n                Click \"Run Migration\" to transfer sample data from the in-memory store to Supabase.\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">4. Test Queries</h4>\n              <p className=\"text-sm text-gray-600\">\n                Click \"Test Queries\" to verify that data can be read from Supabase successfully.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center\">\n          <a\n            href=\"/\"\n            className=\"text-blue-600 hover:text-blue-800 underline\"\n          >\n            ← Back to Home\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}